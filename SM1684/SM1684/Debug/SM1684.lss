
SM1684.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800200  00800200  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000833  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000332  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e0  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c1       	rjmp	.+606    	; 0x2bc <__vector_23>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ec e4       	ldi	r30, 0x4C	; 76
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a0 30       	cpi	r26, 0x00	; 0
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	a0 e0       	ldi	r26, 0x00	; 0
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	ae 30       	cpi	r26, 0x0E	; 14
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	53 d0       	rcall	.+166    	; 0x216 <main>
 170:	eb c0       	rjmp	.+470    	; 0x348 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <init_buttons>:

void button_reed( void) {
	reed_new = !test_bit(PING, PG0);
	if(reed_new != reed_old) {
		motor_reed_step();
		reed_old = reed_new;
 174:	6b 98       	cbi	0x0d, 3	; 13
 176:	98 98       	cbi	0x13, 0	; 19
 178:	6e 98       	cbi	0x0d, 6	; 13
 17a:	56 98       	cbi	0x0a, 6	; 10
 17c:	73 9a       	sbi	0x0e, 3	; 14
 17e:	a0 9a       	sbi	0x14, 0	; 20
 180:	76 9a       	sbi	0x0e, 6	; 14
 182:	5e 9a       	sbi	0x0b, 6	; 11
 184:	08 95       	ret

00000186 <button_heddles>:
 186:	8c b1       	in	r24, 0x0c	; 12
 188:	83 fb       	bst	r24, 3
 18a:	99 27       	eor	r25, r25
 18c:	90 f9       	bld	r25, 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 27       	eor	r24, r25
 192:	80 93 04 02 	sts	0x0204, r24
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	29 f4       	brne	.+10     	; 0x1a4 <button_heddles+0x1e>
 19a:	80 91 05 02 	lds	r24, 0x0205
 19e:	81 11       	cpse	r24, r1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <button_heddles+0x1e>
 1a2:	6d d0       	rcall	.+218    	; 0x27e <motor_heddles_step>
 1a4:	80 91 04 02 	lds	r24, 0x0204
 1a8:	80 93 05 02 	sts	0x0205, r24
 1ac:	08 95       	ret

000001ae <button_garage_cw>:

BOOL garage_old_cw = FALSE;
BOOL garage_new_cw = FALSE;

void button_garage_cw( void) {
	garage_new_cw = !test_bit(PINE, PE6);
 1ae:	8c b1       	in	r24, 0x0c	; 12
 1b0:	86 fb       	bst	r24, 6
 1b2:	99 27       	eor	r25, r25
 1b4:	90 f9       	bld	r25, 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 27       	eor	r24, r25
 1ba:	80 93 02 02 	sts	0x0202, r24
	if(garage_new_cw == TRUE && garage_old_cw == FALSE) {
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	29 f4       	brne	.+10     	; 0x1cc <button_garage_cw+0x1e>
 1c2:	80 91 03 02 	lds	r24, 0x0203
 1c6:	81 11       	cpse	r24, r1
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <button_garage_cw+0x1e>
		motor_garage_cw();
 1ca:	53 d0       	rcall	.+166    	; 0x272 <motor_garage_cw>
		garage_old_cw = TRUE;
	}
	garage_old_cw = garage_new_cw;
 1cc:	80 91 02 02 	lds	r24, 0x0202
 1d0:	80 93 03 02 	sts	0x0203, r24
 1d4:	08 95       	ret

000001d6 <button_garage_ccw>:

BOOL garage_old_ccw = FALSE;
BOOL garage_new_ccw = FALSE;

void button_garage_ccw( void) {
	garage_new_ccw = !test_bit(PIND, PD6);
 1d6:	89 b1       	in	r24, 0x09	; 9
 1d8:	86 fb       	bst	r24, 6
 1da:	99 27       	eor	r25, r25
 1dc:	90 f9       	bld	r25, 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	89 27       	eor	r24, r25
 1e2:	80 93 00 02 	sts	0x0200, r24
	if(garage_new_ccw == TRUE && garage_old_ccw == FALSE) {
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <button_garage_ccw+0x1e>
 1ea:	80 91 01 02 	lds	r24, 0x0201
 1ee:	81 11       	cpse	r24, r1
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <button_garage_ccw+0x1e>
		motor_garage_ccw();
 1f2:	42 d0       	rcall	.+132    	; 0x278 <motor_garage_ccw>
		garage_old_ccw = TRUE;
	}
	garage_old_ccw = garage_new_ccw;
 1f4:	80 91 00 02 	lds	r24, 0x0200
 1f8:	80 93 01 02 	sts	0x0201, r24
 1fc:	08 95       	ret

000001fe <init_LED>:

void LED0( int on) {
	if(on)
	clear_bit(PORTB, PB4);
	else
	set_bit(PORTB, PB4);
 1fe:	24 9a       	sbi	0x04, 4	; 4
 200:	2c 9a       	sbi	0x05, 4	; 5
 202:	08 95       	ret

00000204 <toggle_LED0>:
}

void toggle_LED0( void) {
 	toggle_bit(PORTB, PB4);
 204:	95 b1       	in	r25, 0x05	; 5
 206:	80 e1       	ldi	r24, 0x10	; 16
 208:	89 27       	eor	r24, r25
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	08 95       	ret

0000020e <init>:


/* T0D0: Implement PID-like control on delay */

void init( void) {	
	init_motors();
 20e:	08 d0       	rcall	.+16     	; 0x220 <init_motors>
	init_buttons();
 210:	b1 df       	rcall	.-158    	; 0x174 <init_buttons>
	init_LED();
 212:	f5 cf       	rjmp	.-22     	; 0x1fe <init_LED>
 214:	08 95       	ret

00000216 <main>:
}

int main( void) {
	init();
 216:	fb df       	rcall	.-10     	; 0x20e <init>
    {
// 		set_bit(PORTE, PE2);
// 		if(!test_bit(PINE, PE2))
// 			toggle_LED0();
		//button_reed();
		button_heddles();
 218:	b6 df       	rcall	.-148    	; 0x186 <button_heddles>
		button_garage_cw();
 21a:	c9 df       	rcall	.-110    	; 0x1ae <button_garage_cw>
		button_garage_ccw();
 21c:	dc df       	rcall	.-72     	; 0x1d6 <button_garage_ccw>
    }
 21e:	fc cf       	rjmp	.-8      	; 0x218 <main+0x2>

00000220 <init_motors>:
		clear_bit(PORTB, PB6);
		_delay_us(speed_reed);
		dist_reed = dist_reed +1;
		if(dist_reed>12800) {		// 12800 steps is 360 degrees
			clear_bit(PORTB, PB6);
			dist_reed = 0;
 220:	25 9a       	sbi	0x04, 5	; 4
 222:	6a 9a       	sbi	0x0d, 2	; 13
 224:	2d 9a       	sbi	0x05, 5	; 5
 226:	72 9a       	sbi	0x0e, 2	; 14
 228:	26 9a       	sbi	0x04, 6	; 4
 22a:	6b 9a       	sbi	0x0d, 3	; 13
 22c:	2e 9a       	sbi	0x05, 6	; 5
 22e:	73 9a       	sbi	0x0e, 3	; 14
 230:	55 9a       	sbi	0x0a, 5	; 10
 232:	6d 9a       	sbi	0x0d, 5	; 13
 234:	5d 9a       	sbi	0x0b, 5	; 11
 236:	75 9a       	sbi	0x0e, 5	; 14
 238:	08 95       	ret

0000023a <motor_garage_step>:
 23a:	5d 9a       	sbi	0x0b, 5	; 11
 23c:	25 e1       	ldi	r18, 0x15	; 21
 23e:	2a 95       	dec	r18
 240:	f1 f7       	brne	.-4      	; 0x23e <motor_garage_step+0x4>
 242:	00 00       	nop
 244:	5d 98       	cbi	0x0b, 5	; 11
 246:	85 e1       	ldi	r24, 0x15	; 21
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <motor_garage_step+0xe>
 24c:	00 00       	nop
 24e:	80 91 06 02 	lds	r24, 0x0206
 252:	90 91 07 02 	lds	r25, 0x0207
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 07 02 	sts	0x0207, r25
 25c:	80 93 06 02 	sts	0x0206, r24
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	99 41       	sbci	r25, 0x19	; 25
 264:	54 f3       	brlt	.-44     	; 0x23a <motor_garage_step>
 266:	5d 98       	cbi	0x0b, 5	; 11
 268:	10 92 07 02 	sts	0x0207, r1
 26c:	10 92 06 02 	sts	0x0206, r1
 270:	08 95       	ret

00000272 <motor_garage_cw>:
 272:	75 9a       	sbi	0x0e, 5	; 14
 274:	e2 cf       	rjmp	.-60     	; 0x23a <motor_garage_step>
 276:	08 95       	ret

00000278 <motor_garage_ccw>:
 278:	75 98       	cbi	0x0e, 5	; 14
 27a:	df cf       	rjmp	.-66     	; 0x23a <motor_garage_step>
 27c:	08 95       	ret

0000027e <motor_heddles_step>:
	}
	toggle_bit(PORTE, PE3);			// switch direction
}

void motor_heddles_step( void) {
	toggle_LED0();
 27e:	c2 df       	rcall	.-124    	; 0x204 <toggle_LED0>
	while(1) {
		set_bit(PORTB, PB5);
 280:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	20 e1       	ldi	r18, 0x10	; 16
 284:	2a 95       	dec	r18
 286:	f1 f7       	brne	.-4      	; 0x284 <motor_heddles_step+0x6>
		_delay_us(speed_heddles);
		clear_bit(PORTB, PB5);
 288:	2d 98       	cbi	0x05, 5	; 5
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <motor_heddles_step+0xe>
		_delay_us(speed_heddles);
		dist_heddles = dist_heddles +1;
 290:	80 91 08 02 	lds	r24, 0x0208
 294:	90 91 09 02 	lds	r25, 0x0209
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 09 02 	sts	0x0209, r25
 29e:	80 93 08 02 	sts	0x0208, r24
		if(dist_heddles>6400) {		// 6400 steps is 180 degrees
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	99 41       	sbci	r25, 0x19	; 25
 2a6:	64 f3       	brlt	.-40     	; 0x280 <motor_heddles_step+0x2>
			clear_bit(PORTB, PB5);
 2a8:	2d 98       	cbi	0x05, 5	; 5
			dist_heddles = 0;
 2aa:	10 92 09 02 	sts	0x0209, r1
 2ae:	10 92 08 02 	sts	0x0208, r1
			break;
		}
	}
	toggle_bit(PORTE, PE2);			// switch direction
 2b2:	9e b1       	in	r25, 0x0e	; 14
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	89 27       	eor	r24, r25
 2b8:	8e b9       	out	0x0e, r24	; 14
 2ba:	08 95       	ret

000002bc <__vector_23>:
	set_bit(TIMSK0, TOIE0);
	/* Enable global interrupts */
	sei();
}

ISR(TIMER0_OVF_vect) {	
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
	/*-------------Counter increment---------------*/
	counter = counter + 1;
 2cc:	80 91 0c 02 	lds	r24, 0x020C
 2d0:	90 91 0d 02 	lds	r25, 0x020D
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 0d 02 	sts	0x020D, r25
 2da:	80 93 0c 02 	sts	0x020C, r24
	
	/*----------------Step-signal------------------*/
	if(counter > 5000){
 2de:	89 38       	cpi	r24, 0x89	; 137
 2e0:	93 41       	sbci	r25, 0x13	; 19
 2e2:	b4 f0       	brlt	.+44     	; 0x310 <__vector_23+0x54>
		toggle_bit(PORTB, PB4);
 2e4:	95 b1       	in	r25, 0x05	; 5
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	89 27       	eor	r24, r25
 2ea:	85 b9       	out	0x05, r24	; 5
		counter = 0;
 2ec:	10 92 0d 02 	sts	0x020D, r1
 2f0:	10 92 0c 02 	sts	0x020C, r1
		if (test_bit(PORTB, PB5))
 2f4:	2d 9b       	sbis	0x05, 5	; 5
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <__vector_23+0x40>
			clear_bit(PORTB, PB5);
 2f8:	2d 98       	cbi	0x05, 5	; 5
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <__vector_23+0x42>
		else
			set_bit(PORTB, PB5);
 2fc:	2d 9a       	sbi	0x05, 5	; 5
		distance = distance + 1;
 2fe:	80 91 0a 02 	lds	r24, 0x020A
 302:	90 91 0b 02 	lds	r25, 0x020B
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	90 93 0b 02 	sts	0x020B, r25
 30c:	80 93 0a 02 	sts	0x020A, r24
	}
	/*-------------Change direction----------------*/
	if(distance > 100) {
 310:	80 91 0a 02 	lds	r24, 0x020A
 314:	90 91 0b 02 	lds	r25, 0x020B
 318:	85 36       	cpi	r24, 0x65	; 101
 31a:	91 05       	cpc	r25, r1
 31c:	6c f0       	brlt	.+26     	; 0x338 <__vector_23+0x7c>
		toggle_bit(PORTB, PB4);
 31e:	95 b1       	in	r25, 0x05	; 5
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	89 27       	eor	r24, r25
 324:	85 b9       	out	0x05, r24	; 5
		distance = 0;
 326:	10 92 0b 02 	sts	0x020B, r1
 32a:	10 92 0a 02 	sts	0x020A, r1
		if (test_bit(PORTE, PE2))
 32e:	72 9b       	sbis	0x0e, 2	; 14
 330:	02 c0       	rjmp	.+4      	; 0x336 <__vector_23+0x7a>
			clear_bit(PORTE, PE2);
 332:	72 98       	cbi	0x0e, 2	; 14
 334:	01 c0       	rjmp	.+2      	; 0x338 <__vector_23+0x7c>
		else
			set_bit(PORTE, PE2);
 336:	72 9a       	sbi	0x0e, 2	; 14
	}		
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
